## This script is to do single cell analysis on independent data with 2 asthma patients and 2 healthy controls
## 1.QC and remove doublet(doubletFinder) on each sample
## 2.run CCA analysis to reduce donor effect
## the final results can be found in the peregrine: "/data/p282473/scRNAseq/Remove_doublet"
## or in Cancan's mac: "~/Documents/Projects/PIAMA/Nasal_Brushes/CCA2/Remove_doublet/final_results/"
## performed on peregrine, Nov_19 2018

rm(list=ls())

# load packages
library(Seurat) # main package to deal with single cell data
library(dplyr)
library(Matrix)
library(doubletFinder) # package to remove doublet

setwd("/home/p282473/projects/PIAMA/Nasal_Brushes/")

########### donor1 #############
d1<-readRDS("4951STDY7472264.RDS")
d1@meta.data$group<-"donor1"
d1ns<-dim(d1@raw.data)[2]

mito.genes <- grep(pattern = "^MT-", x = rownames(x = d1@data), value = TRUE)
percent.mito <- colSums(as.matrix(d1@raw.data[mito.genes, ]))/colSums(as.matrix(d1@raw.data))

d1 <- AddMetaData(object = d1, metadata = percent.mito, col.name = "percent.mito")

d1 = FilterCells(d1,
                 subset.names = c("nGene", "percent.mito"),
                 low.thresholds = c(300, -Inf),
                 high.thresholds = c(6000, 0.1))

d1 <- NormalizeData(object = d1, 
                    normalization.method = "LogNormalize", 
                    scale.factor = 10000)

d1 <- FindVariableGenes(object = d1, 
                        mean.function = ExpMean, 
                        dispersion.function = LogVMR, 
                        x.low.cutoff = 0.15, #cuts off ~25%
                        x.high.cutoff = 3,
                        y.cutoff = 0.1)

d1 <- ScaleData(object = d1, 
                vars.to.regress = c("nGene","percent.mito","FOS","ZFP36","JUN","FOSB","HSPA1A","JUNB","EGR1","UBC"),
                model.use = 'linear')

d1 <- RunPCA(object = d1, 
                      do.print = FALSE,
                      pcs.compute = 20)

d1 <- FindClusters(object = d1,
                            reduction.type = "pca",
                            dims.use = 1:9, 
                            resolution = 0.3, 
                            print.output = 0, 
                            save.SNN = FALSE,
                            force.recalc = TRUE)

d1 <- RunTSNE(object = d1, dims.use = 1:9)

d1<-doubletFinder(d1,expected.doublets = 100,proportion.artificial = 0.25, proportion.NN = 0.01)

d1<-SubsetData(d1,subset.name = "pANNPredictions", accept.value = "Singlet",subset.raw = T)

d1ns_re<-dim(d1@raw.data)[2]

d1 <- NormalizeData(object = d1, 
                    normalization.method = "LogNormalize", 
                    scale.factor = 10000)

d1 <- FindVariableGenes(object = d1, 
                        mean.function = ExpMean, 
                        dispersion.function = LogVMR, 
                        x.low.cutoff = 0.15, #cuts off ~25%
                        x.high.cutoff = 3,
                        y.cutoff = 0.1)

d1 <- ScaleData(object = d1, 
                vars.to.regress = c("nGene","percent.mito","FOS","ZFP36","JUN","FOSB","HSPA1A","JUNB","EGR1","UBC"),
                model.use = 'linear')

########### donor2 ###########
d2<-readRDS("4951STDY7472266.RDS")
d2@meta.data$group<-"donor2"
d2ns<-dim(d2@raw.data)[2]

mito.genes <- grep(pattern = "^MT-", x = rownames(x = d2@data), value = TRUE)
percent.mito <- colSums(as.matrix(d2@raw.data[mito.genes, ]))/colSums(as.matrix(d2@raw.data))

d2 <- AddMetaData(object = d2, metadata = percent.mito, col.name = "percent.mito")
d2 = FilterCells(d2,
                 subset.names = c("nGene", "percent.mito"),
                 low.thresholds = c(300, -Inf),
                 high.thresholds = c(6000, 0.1))

d2 <- NormalizeData(object = d2, 
                    normalization.method = "LogNormalize", 
                    scale.factor = 10000)

d2 <- FindVariableGenes(object = d2, 
                        mean.function = ExpMean, 
                        dispersion.function = LogVMR, 
                        x.low.cutoff = 0.15, #cuts off ~25%
                        x.high.cutoff = 3,
                        y.cutoff = 0.1)

## regress out the stress
d2 <- ScaleData(object = d2, 
                vars.to.regress = c("nGene","percent.mito","FOS","ZFP36","JUN","FOSB","HSPA1A","JUNB","EGR1","UBC"),
                model.use = 'linear')

d2 <- RunPCA(object = d2, 
             do.print = FALSE,
             pcs.compute = 20)

d2 <- FindClusters(object = d2,
                   reduction.type = "pca",
                   dims.use = 1:9, 
                   resolution = 0.3, 
                   print.output = 0, 
                   save.SNN = FALSE,
                   force.recalc = TRUE)

d2 <- RunTSNE(object = d2, dims.use = 1:9)

d2<-doubletFinder(d2,expected.doublets = 60,proportion.artificial = 0.25, proportion.NN = 0.01)

d2<-SubsetData(d2,subset.name = "pANNPredictions", accept.value = "Singlet",subset.raw = T)
d2ns_re<-dim(d2@raw.data)[2]

d2 <- NormalizeData(object = d2, 
                    normalization.method = "LogNormalize", 
                    scale.factor = 10000)

d2 <- FindVariableGenes(object = d2, 
                        mean.function = ExpMean, 
                        dispersion.function = LogVMR, 
                        x.low.cutoff = 0.15, #cuts off ~25%
                        x.high.cutoff = 3,
                        y.cutoff = 0.1)

## regress out the stress
d2 <- ScaleData(object = d2, 
                vars.to.regress = c("nGene","percent.mito","FOS","ZFP36","JUN","FOSB","HSPA1A","JUNB","EGR1","UBC"),
                model.use = 'linear')

########### donor4 ###########
d4<-readRDS("4951STDY7472270.RDS")
d4@meta.data$group<-"donor4"
d4ns<-dim(d4@raw.data)[2]

mito.genes <- grep(pattern = "^MT-", x = rownames(x = d4@data), value = TRUE)
percent.mito <- colSums(as.matrix(d4@raw.data[mito.genes, ]))/colSums(as.matrix(d4@raw.data))

d4 <- AddMetaData(object = d4, metadata = percent.mito, col.name = "percent.mito")
d4 = FilterCells(d4,
                 subset.names = c("nGene", "percent.mito"),
                 low.thresholds = c(300, -Inf),
                 high.thresholds = c(6000, 0.1))

d4 <- NormalizeData(object = d4, 
                    normalization.method = "LogNormalize", 
                    scale.factor = 10000)

d4 <- FindVariableGenes(object = d4, 
                        mean.function = ExpMean, 
                        dispersion.function = LogVMR, 
                        x.low.cutoff = 0.15, #cuts off ~25%
                        x.high.cutoff = 3,
                        y.cutoff = 0.1)

d4 <- ScaleData(object = d4, 
                vars.to.regress = c("nGene","percent.mito","FOS","ZFP36","JUN","FOSB","HSPA1A","JUNB","EGR1","UBC"),
                model.use = 'linear')

d4 <- RunPCA(object = d4, 
             do.print = FALSE,
             pcs.compute = 20)

d4 <- FindClusters(object = d4,
                   reduction.type = "pca",
                   dims.use = 1:9, 
                   resolution = 0.3, 
                   print.output = 0, 
                   save.SNN = FALSE,
                   force.recalc = TRUE)

d4 <- RunTSNE(object = d4, dims.use = 1:9)

d4<-doubletFinder(d4,expected.doublets = 60,proportion.artificial = 0.25, proportion.NN = 0.01)

d4<-SubsetData(d4,subset.name = "pANNPredictions", accept.value = "Singlet",subset.raw = T)

d4ns_re<-dim(d4@raw.data)[2]

d4 <- NormalizeData(object = d4, 
                    normalization.method = "LogNormalize", 
                    scale.factor = 10000)

d4 <- FindVariableGenes(object = d4, 
                        mean.function = ExpMean, 
                        dispersion.function = LogVMR, 
                        x.low.cutoff = 0.15, #cuts off ~25%
                        x.high.cutoff = 3,
                        y.cutoff = 0.1)

d4 <- ScaleData(object = d4, 
                vars.to.regress = c("nGene","percent.mito","FOS","ZFP36","JUN","FOSB","HSPA1A","JUNB","EGR1","UBC"),
                model.use = 'linear')

########### donor5 ###########
d5<-readRDS("4951STDY7487593.RDS")
d5@meta.data$group<-"donor5"
d5ns<-dim(d5@raw.data)[2]

mito.genes <- grep(pattern = "^MT-", x = rownames(x = d5@data), value = TRUE)
percent.mito <- colSums(as.matrix(d5@raw.data[mito.genes, ]))/colSums(as.matrix(d5@raw.data))

d5 <- AddMetaData(object = d5, metadata = percent.mito, col.name = "percent.mito")
d5 = FilterCells(d5,
                 subset.names = c("nGene", "percent.mito"),
                 low.thresholds = c(300, -Inf),
                 high.thresholds = c(6000, 0.1))

d5 <- NormalizeData(object = d5, 
                    normalization.method = "LogNormalize", 
                    scale.factor = 10000)

d5 <- FindVariableGenes(object = d5, 
                        mean.function = ExpMean, 
                        dispersion.function = LogVMR, 
                        x.low.cutoff = 0.15, #cuts off ~25%
                        x.high.cutoff = 3,
                        y.cutoff = 0.1)

d5 <- ScaleData(object = d5, 
                vars.to.regress = c("nGene","percent.mito","FOS","ZFP36","JUN","FOSB","HSPA1A","JUNB","EGR1","UBC"),
                model.use = 'linear')

d5 <- RunPCA(object = d5, 
             do.print = FALSE,
             pcs.compute = 20)

d5 <- FindClusters(object = d5,
                   reduction.type = "pca",
                   dims.use = 1:9, 
                   resolution = 0.3, 
                   print.output = 0, 
                   save.SNN = FALSE,
                   force.recalc = TRUE)

d5 <- RunTSNE(object = d5, dims.use = 1:9)

d5<-doubletFinder(d5,expected.doublets = 30,proportion.artificial = 0.25, proportion.NN = 0.01)

d5<-SubsetData(d5,subset.name = "pANNPredictions", accept.value = "Singlet",subset.raw = T)
d5ns_re<-dim(d5@raw.data)[2]

d5 <- NormalizeData(object = d5, 
                    normalization.method = "LogNormalize", 
                    scale.factor = 10000)

d5 <- FindVariableGenes(object = d5, 
                        mean.function = ExpMean, 
                        dispersion.function = LogVMR, 
                        x.low.cutoff = 0.15, #cuts off ~25%
                        x.high.cutoff = 3,
                        y.cutoff = 0.1)

d5 <- ScaleData(object = d5, 
                vars.to.regress = c("nGene","percent.mito","FOS","ZFP36","JUN","FOSB","HSPA1A","JUNB","EGR1","UBC"),
                model.use = 'linear')


g.1 <- head(rownames(d1@hvg.info), 1000)
g.2 <- head(rownames(d2@hvg.info), 1000)
g.4 <- head(rownames(d4@hvg.info), 1000)
g.5 <- head(rownames(d5@hvg.info), 1000)

genes.use <- unique(c(g.1, g.2, g.4, g.5))

genes.use <- intersect(genes.use, rownames(d1@scale.data))
genes.use <- intersect(genes.use, rownames(d2@scale.data))
genes.use <- intersect(genes.use, rownames(d4@scale.data))
genes.use <- intersect(genes.use, rownames(d5@scale.data))

noselist<-list(d1,d2,d4,d5)

immune.combined <- RunMultiCCA(object.list = noselist, genes.use = genes.use,num.ccs = 30)

setwd("./CCA/Remove_doublet")

dns<-c(d1ns,d2ns,d4ns,d5ns)
dns_re<-c(d1ns_re,d2ns_re,d4ns_re,d5ns_re)
dn<-c(1,2,4,5)

df<-data.frame(ID=dn,number_origin=dns,number_remove=dns_re)
write.table(df, file = "cell_number_remove.txt")

p1 <- DimPlot(object = immune.combined, reduction.use = "cca", group.by = "group", 
              pt.size = 0.5, do.return = TRUE)
p2 <- VlnPlot(object = immune.combined, features.plot = "CC1", group.by = "group", 
              do.return = TRUE,point.size.use = F)
p3 <- VlnPlot(object = immune.combined, features.plot = "CC2", group.by = "group", 
              do.return = TRUE,point.size.use = F)

pdf("CCA_C1C2.pdf")
plot_grid(p1, p2, p3)
dev.off()

#pdf("metagene_plot.pdf")
#MetageneBicorPlot(immune.combined, grouping.var = "group", dims.eval = 1:25, 
#                  display.progress = FALSE)
#dev.off()

pdf("dimheatmap.pdf")
DimHeatmap(object = immune.combined, reduction.type = "cca", cells.use = 500, 
           dim.use = 1:9, do.balanced = TRUE)
dev.off()

##################### Align the CCA subspaces ###########################
immune.combined <- AlignSubspace(immune.combined, reduction.type = "cca", grouping.var = "group", 
                                 dims.align = 1:9)

p4 <- VlnPlot(object = immune.combined, features.plot = "ACC1", group.by = "group", 
              do.return = TRUE,point.size.use = F)
p5 <- VlnPlot(object = immune.combined, features.plot = "ACC2", group.by = "group", 
              do.return = TRUE,point.size.use = F)

pdf("CCs_after_correction.pdf")
plot_grid(p4, p5)
dev.off()


### t-SNE and Clustering
immune.combined <- RunTSNE(immune.combined, reduction.use = "cca.aligned", dims.use = 1:9, 
                            do.fast = T)
immune.combined <- FindClusters(immune.combined, reduction.type = "cca.aligned", 
                                 resolution = 0.3, dims.use = 1:9)

saveRDS(immune.combined,file = "nasal_after_CCA_after_findcluster.rds")

p6 <- TSNEPlot(immune.combined, do.return = T, pt.size = 0.5, group.by = "group")
p7 <- TSNEPlot(immune.combined, do.label = T, do.return = T, pt.size = 0.5)

pdf("TSEN_after_correction_donor.pdf")
p6
dev.off()

pdf("TSEN_after_correction_ct.pdf")
p7
dev.off()

########################## find markers #################################################
nose.markers<-FindAllMarkers(immune.combined,only.pos = TRUE, min.pct = 0.25, 
                             thresh.use = 0.25)
write.table(nose.markers,"./Nasal_clusters_all_res.txt")


